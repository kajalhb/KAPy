# KAPy Workflow
#
# This snakemake workflow handles the processing of data for use
# in Klimaatlas-like products. 
#
# The pipeline can be run using
#    > snakemake --cores 1 <target>
#
# A list of available target rules can be obatined using
#   > snakemake -S
#
# Workflow configuration options are set in config.yaml
#

import KAPy
import os

#Setup-----------------------
#Load configuration 
configfile: "/lustre/storeC-ext/users/klimakverna/development/Klimakverna-pilot-KAPy/KAPy/config/config_testcase_1.yaml"  #Defined relative to execution directory
config = KAPy.validateConfig(config)
outDirs = config['dirs']

#Generate filename dicts
wf=KAPy.getWorkflow(config)

# Primary Variables---------------------------------
#Primary variable singular rule
def primaryVar_singular_rule(thisID):
    thisVarName = config['inputs'][thisID]['varName']
    rule:  
        name: f'primaryVar_{thisID}_files'
        output:
            expand(os.path.join(outDirs['variables'],"{varName}","{varName}_{{stem}}.nc"), varName=thisVarName)
        input:
            lambda wildcards: wf['primVars'][thisID][os.path.join(outDirs['variables'], thisVarName, f"{thisVarName}_{wildcards.stem}.nc")]
        run:
            KAPy.buildPrimVar(config=config,
                              inFiles=input,
                              outFile=output,
                              inpID=thisID)

#Plural rule
def primaryVar_plural_rule(thisID):
    rule:
        name: f'primaryVar_{thisID}'
        input:
            list(wf['primVars'][thisID].keys())
            
for inpID in wf['primVars'].keys():
    primaryVar_singular_rule(inpID)
    primaryVar_plural_rule(inpID)

#Run all indicators    
rule primaryVars:
    input:
        [list(thisInp.keys()) for thisInp in wf['primVars'].values()]
        

# Secondary variables -------------------------
# "Secondary variables" are calculated as new variables derived from primary variables.  
# Good examples include FWI, PoteEvap and SPI. 
# Singular rule
def secVar_singular_rule(thisID):
    thisVar=config['secondaryVars'][thisID]
    rule:  
        name: f'secondaryVar_{thisID}_files'
        output:
            expand(os.path.join(outDirs['variables'],"{varName}","{varName}_{{stem}}.nc"),
                   varName=thisVar['outputVars'])
        input:
            expand(os.path.join(outDirs['variables'],"{varName}","{varName}_{{stem}}.nc"),
                   varName=thisVar['inputVars'])
        run:
            KAPy.buildDerivedVar(config=config,
                                     inFiles=input, 
                                     outFile=output,
                                     thisVar=thisVar)
            
#Plural rule
def secVar_plural_rule(thisID):
    rule:
        name: f'secondaryVar_{thisID}'
        input:
            wf['secondaryVars'][thisID]['files']
            
for inpID in wf['secondaryVars'].keys():
    secVar_singular_rule(inpID)
    secVar_plural_rule(inpID)

#Run all plurals    
rule secondaryVars:
    input:
        [item for thisVar in wf['secondaryVars'].values() for item in thisVar['files'] ]
        

"""
#Variables---------------------------------
#Rules for primary and secondary variables can be generated using a generic set of rules
#Singular rule
def var_singular_rule(varType,thisID):
    rule:  
        name: f'{varType}_{thisID}_files'
        output:
            os.path.join(outDirs[varType],"{varFname}")
        input:
            lambda wildcards: 
                wf[varType][thisID][ os.path.join(outDirs[varType],wildcards.varFname)] \
                if varType=="primVar" else \
                wf[varType][thisID][ os.path.join(outDirs[varType],wildcards.varFname)].values()
        run:
            if varType=="primVar":
                KAPy.buildPrimVar(config=config,
                                         inFiles=input,
                                         outFile=output,
                                         inpID=thisID)
            else:
                KAPy.buildDerivedVar(config=config,
                                         inFiles=input,
                                         outFile=output,
                                         inpID=config[varType][thisID])

#Plural rule
def var_plural_rule(varType,thisID):
    rule:
        name: f'{varType}_{thisID}'
        input:
            list(wf[varType][thisID].keys())
            
#Lumped rule
def var_lumped(varType):
    rule:  
        name: f'{varType}'
        input:
            [list(thisVar.keys()) for thisVar in wf[varType].values()]
            
for varType in ['primVars','secVars']:
    var_lumped(varType)
    for varID in wf[varType].keys():
        var_singular_rule(varType,varID)
        var_plural_rule(varType,varID)

"""
        
# Bias correction -------------------
# TODO


# Indicators ---------------------------------
# Create a loop over the indicators that defines the singular and plural rules
# as well as the combined run

#Indicator singular rule
def ind_singular_rule(thisID):
    thisInd=config['indicators'][thisID]
    rule:  
        name: f'indicator_{thisID}_files'
        output:
            os.path.join(outDirs['indicators'],
                         f"{thisID}",f"{thisID}_{{stem}}.nc")
        input:
            expand(os.path.join(outDirs['variables'],
                                "{varName}",
                                "{varName}_{{stem}}.nc"),
                   varName=thisInd['variables'])
        run:
            KAPy.calculateIndicators(config=config,
                                     inFile=input,
                                     outFile=output,
                                     indID=thisID)

#Indicator plural rule
def ind_plural_rule(thisID):
    rule:
        name: f'indicator_{thisID}'
        input:
            list(wf['indicators'][thisID].keys())
            
for indID in config['indicators'].keys():
    ind_singular_rule(indID)
    ind_plural_rule(indID)

#Run all indicators    
rule indicators:
    input:
        [f for thisInd in wf['indicators'].values() for f in thisInd['files']]

# Regridding  ---------------------------------
# Combining everything into an ensemble requires that they are all on a common grid
# This step is optional but if the models are not on a common grid, this will cause failure 
# when we come to the ensstats generation
if config['outputGrid']['regriddingEngine']!='None':
    rule regrid:
        input:
            wf['regridded']['files']

    rule regrid_file:
        output:
            os.path.join(outDirs['regridded'],"{indID}","{stem}.nc")
        input:
            os.path.join(outDirs['indicators'],"{indID}","{stem}.nc")
        run:
            KAPy.regrid(config,input,output)

# Enssemble Statistics ---------------------------------
# Now we can combine them into ensembles
#Plural rule
rule ensstats:
    input:
        list(wf['ensstats'].keys())

#Singular rule
rule ensstats_file:
    output:
        os.path.join(outDirs['ensstats'],"{es}")
    input:
        lambda wildcards: wf['ensstats'][os.path.join(outDirs['ensstats'],wildcards.es)]
    run:
        KAPy.generateEnsstats(config,input,output)


#Areal statistics------------------
#Areal statistics can be calculated for both the enssemble statistics and the
#individual ensemble members - these options can be turned on and off as required
#via the configuration options. 
#Plural rule
rule arealstats:
    input:
        list(wf['arealstats'].keys())

#Singular rule
rule arealstats_file:
    output:
        os.path.join(outDirs['arealstats'],'{arealstats}')
    input:
        lambda wildcards: wf['arealstats'][os.path.join(outDirs['arealstats'],wildcards.arealstats)]
    run:
        KAPy.generateArealstats(config,input,output)

# Outputs ---------------------------------
# Plots, amongst other things

#Plots
rule plots:
    input:
        list(wf['plots'].keys())
        
rule plots_lineplots:
    output:
        os.path.join(outDirs['plots'],'{indID}_lineplot.png')
    input:
        lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
                                                   f"{wildcards.indID}_lineplot.png")]
    run:
        KAPy.makeLineplot(config,wildcards.indID,input,output)

rule plots_boxplots:
    output:
        os.path.join(outDirs['plots'],'{indID}_boxplot.png')
    input:
        lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
                                                   f"{wildcards.indID}_boxplot.png")]
    run:
        KAPy.makeBoxplot(config,wildcards.indID,input,output)

# rule plots_spatial:
#     output:
#         os.path.join(outDirs['plots'],'{indID}_spatial.png')
#     input:
#         lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
#                                                    f"{wildcards.indID}_spatial.png")]
#     run:
#         KAPy.makeSpatialplot(config,wildcards.indID,input,output)

# Change in netcdf
rule save_change_to_netcdf:
    output:
        os.path.join(outDirs['netcdf'], '{indID}_{es}_change_periods.nc')
    input:
        lambda wildcards: wf['netcdf'][os.path.join(outDirs['netcdf'], f"{wildcards.indID}_{wildcards.es}_change_periods.nc")]
    run:
        KAPy.save_change_to_netcdf(config, wildcards.indID, wildcards.es, input, output)

#All-------------------
# wf['all'] = wf['all'][:-1]
rule all:
    input:
        wf['all']
    default_target: True

